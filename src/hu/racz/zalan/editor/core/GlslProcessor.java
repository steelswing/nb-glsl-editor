package hu.racz.zalan.editor.core;

import hu.racz.zalan.editor.antlr.generated.*;
import hu.racz.zalan.editor.core.scope.*;
import hu.racz.zalan.editor.errordisplay.*;
import java.util.*;
import org.antlr.v4.runtime.*;

public class GlslProcessor {

    private static String text;
    private static AntlrGlslLexer lexer;
    private static AntlrGlslParser parser;

    private static List<? extends Token> tokens;
    private static Scope rootScope;
    private static List<GeneratedSyntaxError> errors;

    public static synchronized AntlrGlslLexer getLexer() {
        return lexer;
    }

    public static synchronized AntlrGlslParser getParser() {
        return parser;
    }

    public static synchronized String getText() {
        return text;
    }

    public static synchronized void setText(String text) {
        if (GlslProcessor.text == null || !GlslProcessor.text.equals(text)) {
            GlslProcessor.text = text.replaceAll("\r\n", "\n");
            refreshLexer();
            refreshParser();
        }
    }

    private static void refreshLexer() {
        lexer = new AntlrGlslLexer(new ANTLRInputStream(text));
        GlslProcessor.tokens = lexer.getAllTokens();
        lexer.reset();
    }

    private static void refreshParser() {
        parser = new AntlrGlslParser(new CommonTokenStream(lexer));
        parser.removeErrorListeners();
        parser.addErrorListener(new GlslErrorListener());
        errors = ((GlslErrorListener) parser.getErrorListeners().get(0)).getSyntaxErrors();
        GlslVisitor visitor = new GlslVisitor();
        visitor.visit(parser.start());
        rootScope = visitor.getRootScope();
    }

    public static synchronized List<? extends Token> getTokens() {
        return tokens;
    }

    public static synchronized Scope getRootScope() {
        return rootScope;
    }

    public static synchronized Scope getCaretScope(int caretOffset) {
        if (rootScope == null) {
            return null;
        }
        return getScope(rootScope, caretOffset);
    }

    private static synchronized Scope getScope(Scope scope, int caretOffset) {
        for (Scope child : scope.getScopes()) {
            if (child.getStartIndex() <= caretOffset && child.getStopIndex() >= caretOffset) {
                return getScope(child, caretOffset);
            }
        }
        return scope;
    }

    public static synchronized List<GeneratedSyntaxError> getAutoGeneratedErrors() {
        return errors;
    }

}
