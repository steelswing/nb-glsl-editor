package hu.racz.zalan.editor.errordisplay;

import hu.racz.zalan.editor.core.*;
import static hu.racz.zalan.editor.core.Constants.GLSL;
import hu.racz.zalan.editor.core.scope.*;
import java.util.*;
import javax.swing.text.*;
import org.netbeans.modules.parsing.spi.*;
import org.netbeans.spi.editor.hints.*;
import org.openide.util.*;

public class SyntaxErrorsHighlightingTask extends ParserResultTask<GlslParser.GlslEditorParserResult> {

    private Document document;
    private final List<ErrorDescription> errors = new ArrayList<>();

    @Override
    public void run(GlslParser.GlslEditorParserResult result, SchedulerEvent event) {
        try {
            document = result.getSnapshot().getSource().getDocument(false);
            errors.clear();
            addErrorsToNetbeansEditor();
        } catch (ParseException ex) {
            Exceptions.printStackTrace(ex);
        }
    }

    private void addErrorsToNetbeansEditor() throws ParseException {
        addAntlrErrors();
        addVisitorErrors();
        HintsController.setErrors(document, GLSL, errors);
    }

    private void addAntlrErrors() {
        for (GeneratedSyntaxError error : GlslProcessor.getAutoGeneratedErrors()) {
            errors.add(error.createError(document));
        }
    }

    private void addVisitorErrors() {
        for (UniqueSyntaxError ed : Scope.getErrors()) {
            errors.add(ed.createError(document));
        }
    }

    @Override
    public int getPriority() {
        return 100;
    }

    @Override
    public Class<? extends Scheduler> getSchedulerClass() {
        return Scheduler.EDITOR_SENSITIVE_TASK_SCHEDULER;
    }

    @Override
    public void cancel() {
    }

}
